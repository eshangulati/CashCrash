{"ast":null,"code":"import TransactionService from '@/services/TransactionService';\nexport default {\n  name: 'TransactionView',\n  data() {\n    return {\n      transactions: [],\n      showAddModal: false,\n      showEditModal: false,\n      currentPage: 1,\n      pageSize: 3,\n      newTransaction: {\n        user_id: this.$route.params.user_id,\n        // This should be dynamically set to the logged-in user's ID\n        date: '',\n        category: '',\n        merchant: '',\n        amount: ''\n      },\n      currentTransaction: {}\n    };\n  },\n  created() {\n    this.newTransaction.user_id = localStorage.getItem('user_id');\n    this.fetchTransactions();\n  },\n  methods: {\n    fetchTransactions() {\n      const userId = localStorage.getItem('user_id');\n      TransactionService.getTransactions(userId).then(response => {\n        console.log(\"Transactions fetched: \", response.data);\n        this.transactions = response.data;\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    createTransaction() {\n      this.newTransaction.user_id = localStorage.getItem('user_id');\n      TransactionService.createTransaction(this.newTransaction).then(() => {\n        this.fetchTransactions();\n        this.showAddModal = false;\n        this.resetNewTransaction();\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    editTransaction(transaction) {\n      this.currentTransaction = {\n        ...transaction\n      };\n      this.showEditModal = true;\n    },\n    updateTransaction() {\n      TransactionService.updateTransaction(this.currentTransaction).then(() => {\n        this.fetchTransactions();\n        this.showEditModal = false;\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    deleteTransaction(transactionId) {\n      TransactionService.deleteTransaction(transactionId).then(() => {\n        this.fetchTransactions();\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    resetNewTransaction() {\n      this.newTransaction = {\n        user_id: localStorage.getItem('user_id'),\n        // This should be dynamically set to the logged-in user's ID\n        date: '',\n        category: '',\n        merchant: '',\n        amount: ''\n      };\n    },\n    handlePageClick(pageNumber) {\n      this.currentPage = pageNumber;\n    }\n  },\n  computed: {\n    paginatedTransactions() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      return this.transactions.slice(start, end);\n    },\n    pageCount() {\n      return Math.ceil(this.transactions.length / this.pageSize);\n    }\n  }\n};","map":{"version":3,"names":["TransactionService","name","data","transactions","showAddModal","showEditModal","currentPage","pageSize","newTransaction","user_id","$route","params","date","category","merchant","amount","currentTransaction","created","localStorage","getItem","fetchTransactions","methods","userId","getTransactions","then","response","console","log","catch","error","createTransaction","resetNewTransaction","editTransaction","transaction","updateTransaction","deleteTransaction","transactionId","handlePageClick","pageNumber","computed","paginatedTransactions","start","end","slice","pageCount","Math","ceil","length"],"sources":["/Users/eshangulati/Documents/GitHub/eshangulati.github.io/my-app/src/components/TransactionPage.vue"],"sourcesContent":["<template>\n    <div class=\"transactions-container\">\n      <header class=\"transaction-header\">\n        <h1>Transactions</h1>\n        <nav class=\"nav-buttons\">\n              <router-link :to=\"`/dashboard/${user_id}`\">\n                  <button class=\"nav-button\">Dashboard</button>\n              </router-link>\n            <router-link :to=\"`/budget/${user_id}`\">\n              <button class=\"nav-button\">Budget</button>\n            </router-link>\n            <router-link :to=\"`/savings/${user_id}`\">\n              <button class=\"nav-button\">Savings</button>\n            </router-link>\n            <router-link :to=\"`/reports/${user_id}`\">\n              <button class=\"nav-button\">Reports</button>\n            </router-link>\n          </nav>\n      </header>\n      <br>\n      <button @click=\"showAddModal = true\" class=\"nav-button\">Add Transaction</button>\n      <br>\n      <table class=\"transactions-table\">\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Category</th>\n            <th>Merchant</th>\n            <th>Amount</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"transaction in paginatedTransactions\" :key=\"transaction.id\">\n            <td>{{ transaction.date }}</td>\n            <td>{{ transaction.category }}</td>\n            <td>{{ transaction.merchant }}</td>\n            <td>{{ transaction.amount }}</td>\n            <td>\n              <button @click=\"editTransaction(transaction)\">Edit</button>\n              <button @click=\"deleteTransaction(transaction.id)\">Delete</button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <div class=\"pagination-controls\">\n        <button @click=\"handlePageClick(Math.max(currentPage - 1, 1))\" :disabled=\"currentPage === 1\">\n        Prev Page\n        </button>\n        <span>Page {{ currentPage }} of {{ pageCount }}</span>\n        <button @click=\"handlePageClick(Math.min(currentPage + 1, pageCount))\" :disabled=\"currentPage === pageCount\">\n        Next Page\n        </button>\n      </div>\n  \n      <div v-if=\"showAddModal\" class=\"modal\">\n        <div class=\"modal-content\">\n          <h2>Add Transaction</h2>\n          <form @submit.prevent=\"createTransaction\">\n            <input v-model=\"newTransaction.date\" type=\"date\" required />\n            <select v-model=\"newTransaction.category\" required>\n            <option disabled value=\"\">Select Category</option>\n            <option value=\"Grocery\">Grocery</option>\n            <option value=\"Entertainment\">Entertainment</option>\n            <option value=\"Shopping\">Shopping</option>\n            <option value=\"Education\">Education</option>\n            </select>\n            <input v-model=\"newTransaction.merchant\" type=\"text\" placeholder=\"Merchant\" required />\n            <input v-model=\"newTransaction.amount\" type=\"number\" step=\"0.01\" placeholder=\"Amount\" required />\n            <button type=\"submit\">Add</button>\n            <button type=\"button\" @click=\"showAddModal = false\">Cancel</button>\n          </form>\n        </div>\n      </div>\n  \n      <div v-if=\"showEditModal\" class=\"modal\">\n        <div class=\"modal-content\">\n          <h2>Edit Transaction</h2>\n          <form @submit.prevent=\"updateTransaction\">\n            <input v-model=\"currentTransaction.date\" type=\"date\" required />\n            <select v-model=\"currentTransaction.category\" required>\n            <option disabled value=\"\">Select Category</option>\n            <option value=\"Grocery\">Grocery</option>\n            <option value=\"Entertainment\">Entertainment</option>\n            <option value=\"Shopping\">Shopping</option>\n            <option value=\"Education\">Education</option>\n            </select>\n            <input v-model=\"currentTransaction.merchant\" type=\"text\" placeholder=\"Merchant\" required />\n            <input v-model=\"currentTransaction.amount\" type=\"number\" step=\"0.01\" placeholder=\"Amount\" required />\n            <button type=\"submit\">Update</button>\n            <button type=\"button\" @click=\"showEditModal = false\">Cancel</button>\n          </form>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import TransactionService from '@/services/TransactionService';\n  \n  export default {\n    name: 'TransactionView',\n    data() {\n      return {\n        transactions: [],\n        showAddModal: false,\n        showEditModal: false,\n        currentPage: 1,\n        pageSize: 3,\n        newTransaction: {\n          user_id: this.$route.params.user_id, // This should be dynamically set to the logged-in user's ID\n          date: '',\n          category: '',\n          merchant: '',\n          amount: ''\n        },\n        currentTransaction: {}\n      };\n    },\n    created() {\n        this.newTransaction.user_id = localStorage.getItem('user_id');\n        this.fetchTransactions();\n    },\n    methods: {\n        fetchTransactions() {\n            const userId = localStorage.getItem('user_id');\n            TransactionService.getTransactions(userId)\n        .then(response => {\n            console.log(\"Transactions fetched: \", response.data);\n          this.transactions = response.data;\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    },\n      createTransaction() {\n        this.newTransaction.user_id = localStorage.getItem('user_id');\n        TransactionService.createTransaction(this.newTransaction)\n          .then(() => {\n            this.fetchTransactions();\n            this.showAddModal = false;\n            this.resetNewTransaction();\n          })\n          .catch(error => {\n            console.error(error);\n          });\n      },\n      editTransaction(transaction) {\n        this.currentTransaction = { ...transaction };\n        this.showEditModal = true;\n      },\n      updateTransaction() {\n        TransactionService.updateTransaction(this.currentTransaction)\n          .then(() => {\n            this.fetchTransactions();\n            this.showEditModal = false;\n          })\n          .catch(error => {\n            console.error(error);\n          });\n      },\n      deleteTransaction(transactionId) {\n        TransactionService.deleteTransaction(transactionId)\n          .then(() => {\n            this.fetchTransactions();\n          })\n          .catch(error => {\n            console.error(error);\n          });\n      },\n      resetNewTransaction() {\n        this.newTransaction = {\n          user_id:localStorage.getItem('user_id'), // This should be dynamically set to the logged-in user's ID\n          date: '',\n          category: '',\n          merchant: '',\n          amount: ''\n        };\n      },\n      handlePageClick(pageNumber) {\n        this.currentPage = pageNumber;\n      },\n    },\n    computed: {\n    paginatedTransactions() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      return this.transactions.slice(start, end);\n    },\n    pageCount() {\n      return Math.ceil(this.transactions.length / this.pageSize);\n    }\n  }\n  };\n  </script>\n  \n  <style scoped>\n  .transactions-container {\n    padding: 20px;\n  }\n  \n  .transaction-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-wrap: wrap; /* Allows header content to wrap on smaller screens */\n  }\n\n  .logout-button {\n  position: absolute;\n  top: 10px; /* Adjust based on desired spacing */\n  right: 10px; /* Adjust based on desired spacing */\n  background-color: #ff4444; /* Red color for logout to indicate action */\n  }\n\n  \n  .modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  \n  .modal-content {\n    background: white;\n    padding: 20px;\n    border-radius: 5px;\n  }\n  \n  .nav-button {\n    padding: 10px 20px;\n    border: none;\n    border-radius: 10px; /* Rounded corners */\n    background-color: #4dd0e1; /* Button background color */\n    color: white;\n    cursor: pointer;\n    font-size: 16px;\n    transition: background-color 0.3s;\n  }\n  \n  .nav-button:hover {\n    background-color: #26c6da; /* Darker shade on hover */\n  }\n  \n  .nav-buttons button {\n    margin: 0 5px;\n  }\n  \n  .transactions-table {\n    margin: 20px auto;\n    border-collapse: collapse;\n    width: 100%; /* Adjust table width to be responsive */\n    background-color: white;\n    border-radius: 10px;\n    overflow: hidden;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  }\n  \n  .transactions-table th,\n  .transactions-table td {\n    padding: 12px;\n    text-align: left;\n    border-bottom: 1px solid #4dd0e1;\n  }\n  \n  .transactions-table th {\n    background-color: #4dd0e1;\n    color: white;\n  }\n  \n  .transactions-table tr:hover {\n    background-color: #f1f1f1;\n  }\n  \n  .transactions-table td button {\n    margin: 0 5px;\n    padding: 5px 10px;\n    border: none;\n    border-radius: 5px;\n    background-color: #4dd0e1;\n    color: white;\n    cursor: pointer;\n    transition: background-color 0.3s;\n  }\n  \n  .transactions-table td button:hover {\n    background-color: #26c6da;\n  }\n  \n  .pagination-controls {\n    display: flex;\n    justify-content: center;\n    margin-top: 20px;\n  }\n  \n  .pagination-controls button {\n    padding: 8px 12px;\n    margin: 0 10px;\n    background-color: #4dd0e1;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n  }\n\n  .nav-button.logout-button {\n  background-color: #ff4444; /* Red color for logout to indicate action */\n}\n\n.nav-button.logout-button:hover {\n  background-color: #cc0000; /* Darker red on hover */\n}\n  \n  .pagination-controls button:disabled {\n    opacity: 0.5;\n    cursor: default;\n  }\n  \n  /* Media Queries for smaller devices */\n  @media (max-width: 768px) {\n    .transaction-header {\n      flex-direction: column;\n      align-items: stretch;\n    }\n  \n    .nav-buttons {\n      width: 100%; /* Full width for easier navigation on small devices */\n      margin-top: 10px;\n    }\n  \n    .nav-buttons button, .nav-button {\n      width: 100%; /* Full-width buttons for better accessibility */\n      margin: 5px 0;\n    }\n  \n    .transactions-table {\n      font-size: 11px; /* Smaller font size for content */\n    }\n  }\n  \n  @media (max-width: 480px) {\n    .transaction-header {\n      padding: 10px;\n    }\n  \n    .nav-button {\n      font-size: 14px;\n      padding: 8px 10px;\n    }\n  }\n  </style>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}